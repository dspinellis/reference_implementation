---
 - hosts: localhost
   gather_facts: false
   become: yes

   tasks:
    # Create epidose group to allow passwordless sudo for all commands
    # This is necessary to run epidose as root
    - name: create 'epidose' group
      tags: production, development
      group:
        name: epidose
        state: present

    - name: allow 'epidose' group to have passwordless sudo
      tags: production, development
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%epidose'
        line: '%epidose ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: add sudo user to 'epidose' group
      tags: production, development
      user:
        name: epidose
        groups: epidose
        append: yes
        state: present
        createhome: yes

    - name: create .ssh director
      tags: production, development
      file:
        path: /home/epidose/.ssh
        state: directory
        owner: epidose
        group: epidose
        mode: 0700

    - name: define variable for authorized_keys
      tags: production, development
      stat:
        path: /home/epidose/.ssh/authorized_keys
      register: epidose_ssh

    - name: copy authorized_keys to epidose user
      tags: production, development
      when: not epidose_ssh.stat.exists
      copy:
       src: /home/pi/.ssh/authorized_keys
       dest: /home/epidose/.ssh/authorized_keys
       owner: epidose
       group: epidose
       mode: 0700

    - name: install libraries and packages
      tags: production, development
      become: yes
      become_user: root
      apt:
        name: ['git', 'libbluetooth-dev', 'libglib2.0-dev', 'python3-dev',
        'python3-setuptools', 'shellcheck', 'sqlite3', 'virtualenv',
        'dh-virtualenv', 'debhelper', 'supervisor', 'hostapd', 'dnsmasq']

    - name: setup production environment
      tags: production
      become: yes
      become_user: epidose
      shell: |
       cd /home/epidose
       git clone https://github.com/eellak/epidose
       cd epidose
       virtualenv venv -p /usr/bin/python3
       . venv/bin/activate
       pip3 install -e ".[dev,test,deploy]"
       make package
       sudo make install
      register: setup_env_output

    - name: setup development environment
      tags: development
      become: yes
      become_user: epidose
      shell: |
       cd /home/epidose
       git clone https://github.com/eellak/epidose
       cd epidose
       virtualenv venv -p /usr/bin/python3
       . venv/bin/activate
       pip3 install -e ".[dev,test,deploy]"
       pre-commit install
       git remote add dp3t https://github.com/DP-3T/reference_implementation.git
       git fetch
       make package
       sudo make install
      register: setup_env_output

    - debug:
         msg: "{{ setup_env_output.stdout_lines|list }}"
      tags: production, development

    - name: set git name and email
      tags: production, development
      become: yes
      become_user: root
      git_config:
        name="{{ item.name }}"
        scope=system
        value="{{ item.value }}"
      with_items:
        - {name: "user.name", value: "epidose"}
        - {name: "user.email", value: "epidose@device.com"}

    - name: installl fake-hwclock to /sbin
      tags: production, development
      become: yes
      become_user: root
      copy:
        src: /home/epidose/epidose/epidose/device/setup/fake-hwclock
        dest: /sbin/
        owner: root
        group: root
        mode: 0755

    - name: create wlan0 for wpa-roam
      tags: production, development
      become: yes
      become_user: root
      file:
        path: /etc/network/interfaces.d/wlan0
        state: touch
        owner: root
        group: root
        mode: 0755

    # The configurations below are necessary to allow wireless roaming
    - name: enable network roaming
      tags: production, development
      become: yes
      become_user: root
      blockinfile: |
        dest=/etc/network/interfaces.d/wlan0
        content='# The wireless network interface
                allow-hotplug wlan0
                iface wlan0 inet auto
                wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf'

    - name: create certifcate file for Eduroam
      tags: production, development
      become: yes
      become_user: root
      file:
        path: /etc/ssl/certs/AUEB.pem
        state: touch
        owner: root
        group: root
        mode: 0700

    - name: fill certificate file for Eduroam
      tags: production, development
      become: yes
      become_user: root
      blockinfile: |
        dest=/etc/ssl/certs/AUEB.pem
        content='-----BEGIN CERTIFICATE-----
                MIIEzjCCA7agAwIBAgIJANDIrtAyV/2IMA0GCSqGSIb3DQEBCwUAMIGFMQswCQYD
                VQQGEwJHUjE0MDIGA1UEChMrQXRoZW5zIFVuaXZlcnNpdHkgb2YgRWNvbm9taWNz
                IGFuZCBCdXNpbmVzczFAMD4GA1UEAxM3QXRoZW5zIFVuaXZlcnNpdHkgb2YgRWNv
                bm9taWNzIGFuZCBCdXNpbmVzcyBFQVAgQ0EgMjAxNzAeFw0xNzAxMTkxMDExNTha
                Fw0yNzAxMTcxMDExNThaMIGFMQswCQYDVQQGEwJHUjE0MDIGA1UEChMrQXRoZW5z
                IFVuaXZlcnNpdHkgb2YgRWNvbm9taWNzIGFuZCBCdXNpbmVzczFAMD4GA1UEAxM3
                QXRoZW5zIFVuaXZlcnNpdHkgb2YgRWNvbm9taWNzIGFuZCBCdXNpbmVzcyBFQVAg
                Q0EgMjAxNzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKC2v+pDCkpW
                DGMKdB39vlKiZD3rwgYhL70KUXmQuhQBiMuez9fd4IjmAxHUgtLKFyS3ywKMhUb5
                Np4vhnbyD09S/nohVxaoAmL5iOEf3VVhtVzBQn1ES1NQ8RUCF2a4WL4yUzrHEpFu
                qsHHVQOEX0DfqoCXATYs/H4ciiSdJ16I8CUYT/nKygWSOKcRMjPMjBd+Kd5X7YTM
                oTGcSQSHbLVclbw0AlBxS4tC7RqV5Vnbj6GHC4o5aVWJLQwZyrJOUZt0e8j1GSlg
                r6+shBvtmogx+MvNSPIy3cv9mOXPmVVANHKPnLD/1L74EXMFYdytwvPl+thhIskW
                hiwTsF0Sz68CAwEAAaOCAT0wggE5MB0GA1UdDgQWBBTlG6AaDCr5SSIsApYxskuU
                Pe+mEjCBugYDVR0jBIGyMIGvgBTlG6AaDCr5SSIsApYxskuUPe+mEqGBi6SBiDCB
                hTELMAkGA1UEBhMCR1IxNDAyBgNVBAoTK0F0aGVucyBVbml2ZXJzaXR5IG9mIEVj
                b25vbWljcyBhbmQgQnVzaW5lc3MxQDA+BgNVBAMTN0F0aGVucyBVbml2ZXJzaXR5
                IG9mIEVjb25vbWljcyBhbmQgQnVzaW5lc3MgRUFQIENBIDIwMTeCCQDQyK7QMlf9
                iDBKBgNVHR8EQzBBMD+gPaA7hjlodHRwOi8vb3JzLWNybC5lZHVyb2FtLmdyL2Ny
                bC9lZHVyb2FtLnNlcnZlcnMuYXVlYi5nci5jcmwwDwYDVR0TAQH/BAUwAwEB/zAN
                BgkqhkiG9w0BAQsFAAOCAQEAJ1+VdkQKScMm+A+y1ot54Jf6BGQigNqAXtkt6s6i
                MDCJvMB/b2Gsx/QHk8fPfM2T8rZG4LxGmoYqhWgz+uf8YpbIs6+V6yGhQxalFnOp
                gq1+IGtd1N+vYsZz7V4OJKQ/vE8YY4QtM/40vaY6qwOjMU4MIikMDuWWhoBTsUk3
                4XYbCb/QAYo9Ws44OjG7wO4+By4mYlK0sFiJwfg7o77dUyx7I2fMJ9ilz+W/w8FX
                tv7kPn84y+5qBAQ40VazM1PYC1UJH6xMV6NGtj7FP7oxu6ZynuMhKFc2kw5KvQwk
                jOuCF+8OnXwP3mBfkqPcwLN10A5Wv/O8PwtNXB/FZUdvFg==
                -----END CERTIFICATE-----'

    # Setup Eduroam and epidose backup network configurations
    - name: setup Eduroam and epidose backup networks
      tags: production, development
      become: yes
      become_user: root
      blockinfile: |
        dest=/etc/wpa_supplicant/wpa_supplicant.conf backup=yes
        content='network={
                ssid="eduroam"
                scan_ssid=1
                key_mgmt=WPA-EAP
                pairwise=CCMP
                group=CCMP TKIP
                eap=TTLS
                ca_cert="/etc/ssl/certs/AUEB.pem"
                identity="epidose@aueb.gr"
                altsubject_match="DNS:eduroam.servers.aueb.gr"
                phase2="auth=PAP"
                password="{{ eduroam_network_psk }}"
                anonymous_identity="anonymous"
          }

          network={
          ssid="epidose"
          psk="{{ epidose_backup_network_psk }}"
          }'

    - name: enable SPIO
      tags: production, development
      become: yes
      become_user: root
      replace:
        path: /boot/config.txt
        regexp: '#dtparam=spi=on'
        replace: 'dtparam=spi=on'

    - name: enable serial port
      tags: production, development
      become: yes
      become_user: root
      blockinfile: |
        dest=/boot/config.txt
        content='enable_uart=1'

    - name: disable wlan0 on reboot
      tags: production, development
      become: yes
      become_user: root
      lineinfile: dest=/etc/rc.local
        line="ip link set wlan0 up"
        insertbefore="exit 0"

    # This part and onwards is necessary for the Cuckoo distribution server
    - name: add IP address range for uap0
      tags: production, development
      become: yes
      become_user: root
      blockinfile: |
        dest=/etc/dhcpcd.conf
        content='interface uap0
                   static ip_address=192.168.50.1/24
                   nohook wpa_supplicant'

    - name: remove dnsmasq.conf file
      tags: production, development
      become: yes
      become_user: root
      file:
        path: /etc/dnsmasq.conf
        state: absent

    - name: create dnsmasq.conf
      tags: production, development
      become: yes
      become_user: root
      file:
        path: /etc/dnsmasq.conf
        state: touch
        owner: root
        group: root
        mode: 644

    - name: modify dnsmasq.conf
      tags: production, development
      become: yes
      become_user: root
      blockinfile: |
        dest=/etc/dnsmasq.conf
        content='interface=lo,uap0
                 bind-interfaces
                 server=8.8.8.8
                 domain-needed
                 bogus-priv
                 dhcp-range=192.168.50.50,192.168.50.150,12h'

    - name: create hostapd.conf file
      tags: production, development
      become: yes
      become_user: root
      file:
        path: /etc/hostapd/hostapd.conf
        state: touch
        owner: root
        group: root
        mode: 644

    - name: modify dnsmasq.conf
      tags: production, development
      become: yes
      become_user: root
      blockinfile: |
        dest=/etc/hostapd/hostapd.conf
        content='channel=1
                 ssid=cuckooFilterDistributor
                 wpa_passphrase=epidose123
                 interface=uap0
                 hw_mode=g
                 macaddr_acl=0
                 auth_algs=1
                 ignore_broadcast_ssid=0
                 wpa=2
                 wpa_key_mgmt=WPA-PSK
                 wpa_pairwise=TKIP
                 rsn_pairwise=CCMP
                 driver=nl80211'

    - name: set hostapd default config file
      tags: production, development
      become: yes
      become_user: root
      replace:
        path: /etc/default/hostapd
        regexp: '#DAEMON_CONF=""' 
        replace: 'DAEMON_CONF="/etc/hostapd/hostapd.conf"'
    
    - name: create wifistart file
      tags: production, development
      become: yes
      become_user: root
      file:
        path: /usr/local/bin/wifistart
        state: touch
        owner: root
        group: root
        mode: 644
   
    - name: fill wifistart file
      tags: production, development
      become: yes
      become_user: root
      blockinfile: |
        dest=/usr/local/bin/wifistart
        content='#!/bin/bash

                # Redundant stops to make sure services are not running
                echo "Stopping network services (if running)..."
                systemctl stop hostapd.service
                systemctl stop dnsmasq.service
                systemctl stop dhcpcd.service

                #Make sure no uap0 interface exists (this generates an error; we could probably use an if statement to check if it exists first)
                echo "Removing uap0 interface..."
                iw dev uap0 del

                #Add uap0 interface (this is dependent on the wireless interface being called wlan0, which it may not be in Stretch)
                echo "Adding uap0 interface..."
                iw dev wlan0 interface add uap0 type __ap

                # Bring up uap0 interface. Commented out line may be a possible alternative to using dhcpcd.conf to set up the IP address.
                ifconfig uap0 up

                # Start hostapd. 10-second sleep avoids some race condition, apparently. It may not need to be that long. (?) 
                echo "Starting hostapd service..."
                systemctl unmask hostapd.service
                systemctl start hostapd.service
                sleep 10

                #Start dhcpcd. Again, a 5-second sleep
                echo "Starting dhcpcd service..."
                systemctl start dhcpcd.service
                sleep 5

                echo "Starting dnsmasq service..."
                systemctl unmask dnsmasq.service
                systemctl start dnsmasq.service'

    - name: execute wifistart on boot
      tags: production, development
      become: yes
      become_user: root
      lineinfile: dest=/etc/rc.local
        line="bash /usr/local/bin/wifistart"
        insertbefore="exit 0"

    # Delete pi user
    - name: remove pi user
      tags: delete
      become: yes
      become_user: root
      user:
        name: pi
        state: absent
        remove: yes
        force: yes
